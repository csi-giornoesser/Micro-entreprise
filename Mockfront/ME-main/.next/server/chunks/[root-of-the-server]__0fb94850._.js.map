{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/db.mjs"],"sourcesContent":["// src/app/api/_lib/db.mjs\r\nimport { Pool } from \"pg\";\r\n\r\nlet _pool = globalThis.__PG_POOL;\r\nif (!_pool) {\r\n  _pool = new Pool({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: { rejectUnauthorized: false }, // Neon\r\n  });\r\n  globalThis.__PG_POOL = _pool;\r\n}\r\n\r\nexport function getPool() {\r\n  return _pool;\r\n}\r\n\r\n/**\r\n * withClient(async (c) => { ... })  // c = client PG\r\n * Gère connect/release et laisse ton code au propre.\r\n */\r\nexport async function withClient(fn) {\r\n  const pool = getPool();\r\n  const client = await pool.connect();\r\n  try {\r\n    return await fn(client);\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AAEA,IAAI,QAAQ,WAAW,SAAS;AAChC,IAAI,CAAC,OAAO;IACV,QAAQ,IAAI,oGAAA,CAAA,OAAI,CAAC;QACf,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC1C,KAAK;YAAE,oBAAoB;QAAM;IACnC;IACA,WAAW,SAAS,GAAG;AACzB;AAEO,SAAS;IACd,OAAO;AACT;AAMO,eAAe,WAAW,EAAE;IACjC,MAAM,OAAO;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,OAAO,MAAM,GAAG;IAClB,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/tickets/%5Bid%5D/events/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getPool } from \"../../../_lib/db.mjs\";\r\n\r\nconst pool = getPool();\r\n\r\nexport async function POST(req, { params }) {\r\n  try {\r\n    const { id } = params;\r\n    const body = await req.json().catch(() => ({}));\r\n    \r\n    if (!id || isNaN(parseInt(id))) {\r\n      return NextResponse.json({ error: \"ID ticket invalide\" }, { status: 400 });\r\n    }\r\n\r\n    const {\r\n      message,\r\n      attachments = null\r\n    } = body;\r\n\r\n    if (!message || !message.trim()) {\r\n      return NextResponse.json({ error: \"Message requis\" }, { status: 400 });\r\n    }\r\n\r\n    const c = await pool.connect();\r\n    \r\n    try {\r\n      await c.query(\"BEGIN\");\r\n\r\n      // 1. Vérifier que le ticket existe\r\n      const { rows: tickets } = await c.query(`\r\n        SELECT id, statut \r\n        FROM core.tickets \r\n        WHERE id = $1\r\n      `, [parseInt(id)]);\r\n\r\n      if (!tickets.length) {\r\n        await c.query(\"ROLLBACK\");\r\n        return NextResponse.json({ error: \"Ticket introuvable\" }, { status: 404 });\r\n      }\r\n\r\n      // 2. Ajouter l'event\r\n      const { rows: events } = await c.query(`\r\n        INSERT INTO core.ticket_events (ticket_id, message, attachments)\r\n        VALUES ($1, $2, $3)\r\n        RETURNING id, ticket_id, at, message, attachments\r\n      `, [\r\n        parseInt(id), \r\n        message.trim(), \r\n        attachments ? JSON.stringify(attachments) : null\r\n      ]);\r\n\r\n      // 3. Auto-rouvrir le ticket si fermé et qu'on ajoute un message\r\n      if (tickets[0].statut === \"Fermé\") {\r\n        await c.query(`\r\n          UPDATE core.tickets \r\n          SET statut = 'En cours'\r\n          WHERE id = $1\r\n        `, [parseInt(id)]);\r\n\r\n        // Ajouter un event automatique pour tracer la réouverture\r\n        await c.query(`\r\n          INSERT INTO core.ticket_events (ticket_id, message)\r\n          VALUES ($1, $2)\r\n        `, [parseInt(id), \"Ticket rouvert automatiquement suite à un nouveau message\"]);\r\n      }\r\n\r\n      await c.query(\"COMMIT\");\r\n\r\n      return NextResponse.json({\r\n        event: events[0],\r\n        message: \"Message ajouté avec succès\"\r\n      }, { status: 201 });\r\n\r\n    } finally {\r\n      c.release();\r\n    }\r\n\r\n  } catch (e) {\r\n    console.error(\"Erreur POST ticket event:\", e);\r\n    return NextResponse.json({\r\n      error: \"Erreur lors de l'ajout du message\"\r\n    }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;AAEA,MAAM,OAAO,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD;AAEZ,eAAe,KAAK,GAAG,EAAE,EAAE,MAAM,EAAE;IACxC,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG;QACf,MAAM,OAAO,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC;QAE7C,IAAI,CAAC,MAAM,MAAM,SAAS,MAAM;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,MAAM,EACJ,OAAO,EACP,cAAc,IAAI,EACnB,GAAG;QAEJ,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,IAAI;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,IAAI,MAAM,KAAK,OAAO;QAE5B,IAAI;YACF,MAAM,EAAE,KAAK,CAAC;YAEd,mCAAmC;YACnC,MAAM,EAAE,MAAM,OAAO,EAAE,GAAG,MAAM,EAAE,KAAK,CAAC,CAAC;;;;MAIzC,CAAC,EAAE;gBAAC,SAAS;aAAI;YAEjB,IAAI,CAAC,QAAQ,MAAM,EAAE;gBACnB,MAAM,EAAE,KAAK,CAAC;gBACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAqB,GAAG;oBAAE,QAAQ;gBAAI;YAC1E;YAEA,qBAAqB;YACrB,MAAM,EAAE,MAAM,MAAM,EAAE,GAAG,MAAM,EAAE,KAAK,CAAC,CAAC;;;;MAIxC,CAAC,EAAE;gBACD,SAAS;gBACT,QAAQ,IAAI;gBACZ,cAAc,KAAK,SAAS,CAAC,eAAe;aAC7C;YAED,gEAAgE;YAChE,IAAI,OAAO,CAAC,EAAE,CAAC,MAAM,KAAK,SAAS;gBACjC,MAAM,EAAE,KAAK,CAAC,CAAC;;;;QAIf,CAAC,EAAE;oBAAC,SAAS;iBAAI;gBAEjB,0DAA0D;gBAC1D,MAAM,EAAE,KAAK,CAAC,CAAC;;;QAGf,CAAC,EAAE;oBAAC,SAAS;oBAAK;iBAA4D;YAChF;YAEA,MAAM,EAAE,KAAK,CAAC;YAEd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,OAAO,MAAM,CAAC,EAAE;gBAChB,SAAS;YACX,GAAG;gBAAE,QAAQ;YAAI;QAEnB,SAAU;YACR,EAAE,OAAO;QACX;IAEF,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}