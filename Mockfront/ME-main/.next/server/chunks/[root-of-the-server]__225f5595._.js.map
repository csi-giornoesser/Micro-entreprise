{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/db.mjs"],"sourcesContent":["// src/app/api/_lib/db.mjs\r\nimport { Pool } from \"pg\";\r\n\r\nlet _pool = globalThis.__PG_POOL;\r\nif (!_pool) {\r\n  _pool = new Pool({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: { rejectUnauthorized: false }, // Neon\r\n  });\r\n  globalThis.__PG_POOL = _pool;\r\n}\r\n\r\nexport function getPool() {\r\n  return _pool;\r\n}\r\n\r\n/**\r\n * withClient(async (c) => { ... })  // c = client PG\r\n * Gère connect/release et laisse ton code au propre.\r\n */\r\nexport async function withClient(fn) {\r\n  const pool = getPool();\r\n  const client = await pool.connect();\r\n  try {\r\n    return await fn(client);\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AAEA,IAAI,QAAQ,WAAW,SAAS;AAChC,IAAI,CAAC,OAAO;IACV,QAAQ,IAAI,oGAAA,CAAA,OAAI,CAAC;QACf,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC1C,KAAK;YAAE,oBAAoB;QAAM;IACnC;IACA,WAAW,SAAS,GAAG;AACzB;AAEO,SAAS;IACd,OAAO;AACT;AAMO,eAAe,WAAW,EAAE;IACjC,MAAM,OAAO;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,OAAO,MAAM,GAAG;IAClB,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/clients/%5Bid%5D/route.js"],"sourcesContent":["// src/app/api/clients/[id]/route.js\r\nimport { NextResponse } from \"next/server\";\r\nimport { getPool } from \"../../_lib/db.mjs\";\r\n\r\nconst pool = getPool();\r\n\r\nexport async function GET(_req, { params }) {\r\n  const id = Number(params.id);\r\n  if (Number.isNaN(id)) {\r\n    return NextResponse.json({ error: \"bad id\" }, { status: 400 });\r\n  }\r\n\r\n  const client = await pool.connect();\r\n  try {\r\n    // ----- CLIENT\r\n    const { rows: clientRows } = await client.query(\r\n      `SELECT c.* FROM core.clients c WHERE c.id = $1`,\r\n      [id]\r\n    );\r\n    if (clientRows.length === 0) {\r\n      return NextResponse.json({ error: \"not found\" }, { status: 404 });\r\n    }\r\n    const c = clientRows[0];\r\n\r\n    // ----- DOSSIERS\r\n    const { rows: dossierRows } = await client.query(\r\n      `SELECT *\r\n         FROM core.dossiers\r\n        WHERE client_id = $1\r\n        ORDER BY date_creation DESC`,\r\n      [id]\r\n    );\r\n    const dossierIds = dossierRows.map(d => d.id);\r\n\r\n    // ----- PIECES\r\n    const { rows: piecesRows } = await client.query(\r\n      `SELECT type, fichier, statut, motif_refus, uploaded_at\r\n         FROM core.pieces_justificatives\r\n        WHERE client_id = $1\r\n        ORDER BY uploaded_at NULLS LAST`,\r\n      [id]\r\n    );\r\n\r\n    // ----- TELECHARGEMENTS\r\n    const { rows: downloadsRows } = await client.query(\r\n      `SELECT type, fichier\r\n         FROM core.client_downloads\r\n        WHERE client_id = $1`,\r\n      [id]\r\n    );\r\n\r\n    // ----- MESSAGES (zone d’échange legacy)\r\n    let messagesRows = [];\r\n    if (dossierIds.length) {\r\n      const { rows } = await client.query(\r\n        `SELECT dossier_id, sender_type AS \"from\", body AS message, at\r\n           FROM core.messages\r\n          WHERE dossier_id = ANY($1::int[])\r\n          ORDER BY at ASC`,\r\n        [dossierIds]\r\n      );\r\n      messagesRows = rows;\r\n    }\r\n\r\n    // ----- Historique legacy (gardé pour compatibilité)\r\n    const { rows: histoContact } = await client.query(\r\n      `SELECT at, type, note\r\n         FROM core.client_contact_logs\r\n        WHERE client_id = $1\r\n        ORDER BY at ASC`,\r\n      [id]\r\n    );\r\n    const { rows: histoEmails } = await client.query(\r\n      `SELECT envoye_le AS at, type, canal\r\n         FROM core.emails_automatiques\r\n        WHERE client_id = $1\r\n        ORDER BY envoye_le ASC`,\r\n      [id]\r\n    );\r\n\r\n    // ===== RELANCES & NOTIFICATIONS =====\r\n    const { rows: notifications } = await client.query(\r\n      `SELECT \r\n          id,\r\n          type,\r\n          client_id,\r\n          dossier_id,\r\n          canal,\r\n          scheduled_for,\r\n          message\r\n       FROM core.notifications_queue\r\n       WHERE client_id = $1\r\n       ORDER BY scheduled_for DESC`,\r\n      [id]\r\n    );\r\n\r\n    // Séparation des relances\r\n    const relances = notifications.filter(n => n.type.startsWith(\"relance\"));\r\n\r\n    // Dernière relance contenant un message\r\n    const alert_relance = relances.find(n => typeof n.message === \"string\" && n.message.trim() !== \"\") || null;\r\n\r\n    // ===== ENTREPRISE =====\r\n    let entreprise = null;\r\n    if (c.entreprise_id) {\r\n      const { rows: eRows } = await client.query(\r\n        `SELECT * FROM core.entreprises WHERE id = $1`,\r\n        [c.entreprise_id]\r\n      );\r\n      if (eRows.length) {\r\n        const e = eRows[0];\r\n        entreprise = {\r\n          id: e.id,\r\n          denomination: e.denomination,\r\n          forme: e.forme,\r\n          statut_dossier: e.statut_dossier,\r\n          activite: e.activite,\r\n          lieu_exercice: e.lieu_exercice,\r\n          dates: e.dates,\r\n          options_sociales: e.options_sociales,\r\n          options_fiscales: e.options_fiscales,\r\n          service_paiement: e.service_paiement,\r\n          checklist_conformite: e.checklist_conformite,\r\n          donnees_gouvernement: {\r\n            guichet_unique_INPI: e.gov_inpi,\r\n            INSEE_SIRENE: e.gov_insee,\r\n            URSSAF: e.gov_urssaf,\r\n            RNE: e.gov_rne,\r\n          },\r\n        };\r\n      }\r\n    }\r\n\r\n    // ===== FAQ =====\r\n    let faq = [];\r\n    try {\r\n      const { rows } = await client.query(\r\n        `WITH cte AS (\r\n           SELECT origine_partenaire_id AS partner_id\r\n             FROM core.clients\r\n            WHERE id = $1\r\n         )\r\n         SELECT f.id, f.category, f.question, f.answer, f.position\r\n           FROM core.faq_entries f\r\n           LEFT JOIN cte ON TRUE\r\n          WHERE f.is_active = TRUE\r\n            AND f.audience = 'client'\r\n            AND f.lang = 'fr'\r\n            AND (f.partner_id IS NULL OR f.partner_id = cte.partner_id)\r\n          ORDER BY COALESCE(f.category,''), f.position NULLS LAST, f.id`,\r\n        [id]\r\n      );\r\n      faq = rows;\r\n    } catch {}\r\n\r\n    return NextResponse.json({\r\n      client: c,\r\n      entreprise,\r\n      dossiers: dossierRows,\r\n      pieces_justificatives: piecesRows,\r\n      telechargements_disponibles: downloadsRows,\r\n      zone_echange: messagesRows.map(m => ({\r\n        ...m,\r\n        date: m.at?.toISOString?.()?.slice(0, 10),\r\n      })),\r\n      historique_echanges: [\r\n        ...histoContact.map(h => ({\r\n          date: h.at?.toISOString?.()?.slice(0, 10),\r\n          type: h.type || \"note\",\r\n          note: h.note || \"\",\r\n        })),\r\n        ...histoEmails.map(h => ({\r\n          date: h.at?.toISOString?.()?.slice(0, 10),\r\n          type: \"email\",\r\n          note: h.type + (h.canal ? ` (${h.canal})` : \"\"),\r\n        })),\r\n      ],\r\n      // Pour le dashboard\r\n      relances,\r\n      notifications,\r\n      alert_relance,\r\n      faq,\r\n    });\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,oCAAoC;;;;AACpC;AACA;;;;;;;AAEA,MAAM,OAAO,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD;AAEZ,eAAe,IAAI,IAAI,EAAE,EAAE,MAAM,EAAE;IACxC,MAAM,KAAK,OAAO,OAAO,EAAE;IAC3B,IAAI,OAAO,KAAK,CAAC,KAAK;QACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAS,GAAG;YAAE,QAAQ;QAAI;IAC9D;IAEA,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,eAAe;QACf,MAAM,EAAE,MAAM,UAAU,EAAE,GAAG,MAAM,OAAO,KAAK,CAC7C,CAAC,8CAA8C,CAAC,EAChD;YAAC;SAAG;QAEN,IAAI,WAAW,MAAM,KAAK,GAAG;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAY,GAAG;gBAAE,QAAQ;YAAI;QACjE;QACA,MAAM,IAAI,UAAU,CAAC,EAAE;QAEvB,iBAAiB;QACjB,MAAM,EAAE,MAAM,WAAW,EAAE,GAAG,MAAM,OAAO,KAAK,CAC9C,CAAC;;;mCAG4B,CAAC,EAC9B;YAAC;SAAG;QAEN,MAAM,aAAa,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE;QAE5C,eAAe;QACf,MAAM,EAAE,MAAM,UAAU,EAAE,GAAG,MAAM,OAAO,KAAK,CAC7C,CAAC;;;uCAGgC,CAAC,EAClC;YAAC;SAAG;QAGN,wBAAwB;QACxB,MAAM,EAAE,MAAM,aAAa,EAAE,GAAG,MAAM,OAAO,KAAK,CAChD,CAAC;;4BAEqB,CAAC,EACvB;YAAC;SAAG;QAGN,yCAAyC;QACzC,IAAI,eAAe,EAAE;QACrB,IAAI,WAAW,MAAM,EAAE;YACrB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,OAAO,KAAK,CACjC,CAAC;;;yBAGgB,CAAC,EAClB;gBAAC;aAAW;YAEd,eAAe;QACjB;QAEA,qDAAqD;QACrD,MAAM,EAAE,MAAM,YAAY,EAAE,GAAG,MAAM,OAAO,KAAK,CAC/C,CAAC;;;uBAGgB,CAAC,EAClB;YAAC;SAAG;QAEN,MAAM,EAAE,MAAM,WAAW,EAAE,GAAG,MAAM,OAAO,KAAK,CAC9C,CAAC;;;8BAGuB,CAAC,EACzB;YAAC;SAAG;QAGN,uCAAuC;QACvC,MAAM,EAAE,MAAM,aAAa,EAAE,GAAG,MAAM,OAAO,KAAK,CAChD,CAAC;;;;;;;;;;kCAU2B,CAAC,EAC7B;YAAC;SAAG;QAGN,0BAA0B;QAC1B,MAAM,WAAW,cAAc,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,UAAU,CAAC;QAE7D,wCAAwC;QACxC,MAAM,gBAAgB,SAAS,IAAI,CAAC,CAAA,IAAK,OAAO,EAAE,OAAO,KAAK,YAAY,EAAE,OAAO,CAAC,IAAI,OAAO,OAAO;QAEtG,yBAAyB;QACzB,IAAI,aAAa;QACjB,IAAI,EAAE,aAAa,EAAE;YACnB,MAAM,EAAE,MAAM,KAAK,EAAE,GAAG,MAAM,OAAO,KAAK,CACxC,CAAC,4CAA4C,CAAC,EAC9C;gBAAC,EAAE,aAAa;aAAC;YAEnB,IAAI,MAAM,MAAM,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,EAAE;gBAClB,aAAa;oBACX,IAAI,EAAE,EAAE;oBACR,cAAc,EAAE,YAAY;oBAC5B,OAAO,EAAE,KAAK;oBACd,gBAAgB,EAAE,cAAc;oBAChC,UAAU,EAAE,QAAQ;oBACpB,eAAe,EAAE,aAAa;oBAC9B,OAAO,EAAE,KAAK;oBACd,kBAAkB,EAAE,gBAAgB;oBACpC,kBAAkB,EAAE,gBAAgB;oBACpC,kBAAkB,EAAE,gBAAgB;oBACpC,sBAAsB,EAAE,oBAAoB;oBAC5C,sBAAsB;wBACpB,qBAAqB,EAAE,QAAQ;wBAC/B,cAAc,EAAE,SAAS;wBACzB,QAAQ,EAAE,UAAU;wBACpB,KAAK,EAAE,OAAO;oBAChB;gBACF;YACF;QACF;QAEA,kBAAkB;QAClB,IAAI,MAAM,EAAE;QACZ,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,OAAO,KAAK,CACjC,CAAC;;;;;;;;;;;;uEAY8D,CAAC,EAChE;gBAAC;aAAG;YAEN,MAAM;QACR,EAAE,OAAM,CAAC;QAET,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ;YACR;YACA,UAAU;YACV,uBAAuB;YACvB,6BAA6B;YAC7B,cAAc,aAAa,GAAG,CAAC,CAAA,IAAK,CAAC;oBACnC,GAAG,CAAC;oBACJ,MAAM,EAAE,EAAE,EAAE,iBAAiB,MAAM,GAAG;gBACxC,CAAC;YACD,qBAAqB;mBAChB,aAAa,GAAG,CAAC,CAAA,IAAK,CAAC;wBACxB,MAAM,EAAE,EAAE,EAAE,iBAAiB,MAAM,GAAG;wBACtC,MAAM,EAAE,IAAI,IAAI;wBAChB,MAAM,EAAE,IAAI,IAAI;oBAClB,CAAC;mBACE,YAAY,GAAG,CAAC,CAAA,IAAK,CAAC;wBACvB,MAAM,EAAE,EAAE,EAAE,iBAAiB,MAAM,GAAG;wBACtC,MAAM;wBACN,MAAM,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;oBAChD,CAAC;aACF;YACD,oBAAoB;YACpB;YACA;YACA;YACA;QACF;IACF,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}}]
}