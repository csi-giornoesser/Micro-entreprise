{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/db.mjs"],"sourcesContent":["// src/app/api/_lib/db.mjs\r\nimport { Pool } from \"pg\";\r\n\r\nlet _pool = globalThis.__PG_POOL;\r\nif (!_pool) {\r\n  _pool = new Pool({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: { rejectUnauthorized: false }, // Neon\r\n  });\r\n  globalThis.__PG_POOL = _pool;\r\n}\r\n\r\nexport function getPool() {\r\n  return _pool;\r\n}\r\n\r\n/**\r\n * withClient(async (c) => { ... })  // c = client PG\r\n * G√®re connect/release et laisse ton code au propre.\r\n */\r\nexport async function withClient(fn) {\r\n  const pool = getPool();\r\n  const client = await pool.connect();\r\n  try {\r\n    return await fn(client);\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AAEA,IAAI,QAAQ,WAAW,SAAS;AAChC,IAAI,CAAC,OAAO;IACV,QAAQ,IAAI,oGAAA,CAAA,OAAI,CAAC;QACf,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC1C,KAAK;YAAE,oBAAoB;QAAM;IACnC;IACA,WAAW,SAAS,GAAG;AACzB;AAEO,SAAS;IACd,OAAO;AACT;AAMO,eAAe,WAAW,EAAE;IACjC,MAAM,OAAO;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,OAAO,MAAM,GAAG;IAClB,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/tickets/route.js"],"sourcesContent":["export const runtime = \"nodejs\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { getPool } from \"../_lib/db.mjs\";\r\n\r\nconst pool = getPool();\r\n\r\n// GET - Liste des tickets avec filtres\r\nexport async function GET(req) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    \r\n    // Filtres disponibles\r\n    const statut = searchParams.get(\"statut\");\r\n    const priorite = searchParams.get(\"priorite\");\r\n    const operatorId = searchParams.get(\"operatorId\");\r\n    const dossierId = searchParams.get(\"dossierId\");\r\n    const limit = parseInt(searchParams.get(\"limit\")) || 50;\r\n    const offset = parseInt(searchParams.get(\"offset\")) || 0;\r\n\r\n    // Construction de la requ√™te avec filtres\r\n    let whereConditions = [];\r\n    let params = [];\r\n    let paramCount = 0;\r\n\r\n    if (statut && statut !== \"all\") {\r\n      paramCount++;\r\n      whereConditions.push(`t.statut = $${paramCount}`);\r\n      params.push(statut);\r\n    }\r\n\r\n    if (priorite && priorite !== \"all\") {\r\n      paramCount++;\r\n      whereConditions.push(`t.priorite = $${paramCount}`);\r\n      params.push(priorite);\r\n    }\r\n\r\n    if (operatorId && operatorId !== \"all\") {\r\n      paramCount++;\r\n      whereConditions.push(`t.assigne_operateur_id = $${paramCount}`);\r\n      params.push(parseInt(operatorId));\r\n    }\r\n\r\n    if (dossierId) {\r\n      paramCount++;\r\n      whereConditions.push(`t.dossier_id = $${paramCount}`);\r\n      params.push(parseInt(dossierId));\r\n    }\r\n\r\n    const whereClause = whereConditions.length > 0 \r\n      ? `WHERE ${whereConditions.join(\" AND \")}`\r\n      : \"\";\r\n\r\n    // Ajouter limit et offset\r\n    params.push(limit, offset);\r\n    const limitClause = `LIMIT $${++paramCount} OFFSET $${++paramCount}`;\r\n\r\n    const query = `\r\n      SELECT \r\n        t.id,\r\n        t.dossier_id,\r\n        t.subject,\r\n        t.statut,\r\n        t.priorite,\r\n        t.assigne_operateur_id,\r\n        t.ouverture,\r\n        t.source,\r\n        t.created_at,\r\n        \r\n        -- Info dossier\r\n        d.statut as dossier_statut,\r\n        d.client_id,\r\n        \r\n        -- Info client\r\n        c.prenom,\r\n        c.nom,\r\n        c.email,\r\n        \r\n        -- Op√©rateur assign√©\r\n        o.nom as operateur_nom,\r\n        o.email as operateur_email,\r\n        \r\n        -- Dernier event (aper√ßu)\r\n        te.message as dernier_message,\r\n        te.at as dernier_event_at\r\n        \r\n      FROM core.tickets t\r\n      LEFT JOIN core.dossiers d ON t.dossier_id = d.id\r\n      LEFT JOIN core.clients c ON d.client_id = c.id\r\n      LEFT JOIN core.operateurs o ON t.assigne_operateur_id = o.id\r\n      LEFT JOIN LATERAL (\r\n        SELECT message, at\r\n        FROM core.ticket_events\r\n        WHERE ticket_id = t.id\r\n        ORDER BY at DESC\r\n        LIMIT 1\r\n      ) te ON true\r\n      \r\n      ${whereClause}\r\n      ORDER BY t.created_at DESC\r\n      ${limitClause}\r\n    `;\r\n\r\n    const { rows: tickets } = await pool.query(query, params);\r\n\r\n    // Compter le total pour la pagination\r\n    const countQuery = `\r\n      SELECT COUNT(*) as total\r\n      FROM core.tickets t\r\n      LEFT JOIN core.dossiers d ON t.dossier_id = d.id\r\n      ${whereClause}\r\n    `;\r\n    const countParams = params.slice(0, -2); // Enlever limit/offset\r\n    const { rows: [{ total }] } = await pool.query(countQuery, countParams);\r\n\r\n    // R√©cup√©rer les r√©f√©rentiels pour les filtres\r\n    const { rows: operateurs } = await pool.query(\r\n      `SELECT id, nom, email FROM core.operateurs ORDER BY nom`\r\n    );\r\n\r\n    return NextResponse.json({\r\n      tickets,\r\n      total: parseInt(total),\r\n      limit,\r\n      offset,\r\n      filters: {\r\n        statuts: [\"Nouveau\", \"En cours\", \"R√©solu\", \"Ferm√©\"],\r\n        priorites: [\"Basse\", \"Moyenne\", \"Haute\"],\r\n        operateurs\r\n      }\r\n    });\r\n\r\n  } catch (e) {\r\n    console.error(\"Erreur GET tickets:\", e);\r\n    return NextResponse.json({\r\n      error: \"Erreur lors de la r√©cup√©ration des tickets\"\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST - Cr√©er un nouveau ticket\r\nexport async function POST(req) {\r\n  const body = await req.json().catch(() => ({}));\r\n  const {\r\n    dossier_id,\r\n    subject = \"Nouveau ticket\",       // üÜï Subject du ticket\r\n    priorite = \"Moyenne\",             // 'Basse' | 'Moyenne' | 'Haute'\r\n    assigne_operateur_id = null,      // optionnel\r\n    ouverture = \"manuelle\",           // 'auto' | 'manuelle'\r\n    source,             // source de cr√©ation\r\n    message = \"Ticket cr√©√© depuis le CRM\", // Premier message\r\n    attachments = null,                // Pi√®ces jointes optionnelles\r\n    sender_type\r\n  } = body || {};\r\n\r\n  const computedSource = source ?? `manual:${(sender_type || 'operateur').toLowerCase()}:${Date.now()}`;\r\n\r\n  if (!dossier_id) return NextResponse.json({ error: \"dossier_id requis\" }, { status: 400 });\r\n  if (!subject?.trim()) return NextResponse.json({ error: \"subject requis\" }, { status: 400 });\r\n\r\n\r\n  const c = await pool.connect();\r\n  try {\r\n    await c.query(\"BEGIN\");\r\n    const { rows: tickets } = await c.query(\r\n      `INSERT INTO core.tickets \r\n         (dossier_id, subject, statut, priorite, assigne_operateur_id, ouverture, source)\r\n       VALUES ($1, $2, 'Nouveau', $3, $4, $5, $6)\r\n       RETURNING id, dossier_id, subject, statut, priorite, assigne_operateur_id, ouverture, source, created_at`,\r\n\r\n    [dossier_id, subject.trim(), priorite, assigne_operateur_id, ouverture, computedSource]\r\n\r\n    );\r\n    await c.query(\r\n      `INSERT INTO core.ticket_events (ticket_id, message, attachments)\r\n       VALUES ($1, $2, $3)`,\r\n      [tickets[0].id, message, attachments ? JSON.stringify(attachments) : null]\r\n    );\r\n    await c.query(\"COMMIT\");\r\n    return NextResponse.json({ ticket: tickets[0], message: \"Ticket cr√©√© avec succ√®s\" }, { status: 201 });\r\n  } catch (e) {\r\n    await c.query(\"ROLLBACK\");\r\n    return NextResponse.json({ error: e.message || \"Erreur lors de la cr√©ation du ticket\" }, { status: 500 });\r\n  } finally {\r\n    c.release();\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}