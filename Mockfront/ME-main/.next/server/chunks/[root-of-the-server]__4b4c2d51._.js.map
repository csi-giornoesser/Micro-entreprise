{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/db.mjs"],"sourcesContent":["// src/app/api/_lib/db.mjs\r\nimport { Pool } from \"pg\";\r\n\r\nlet _pool = globalThis.__PG_POOL;\r\nif (!_pool) {\r\n  _pool = new Pool({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: { rejectUnauthorized: false }, // Neon\r\n  });\r\n  globalThis.__PG_POOL = _pool;\r\n}\r\n\r\nexport function getPool() {\r\n  return _pool;\r\n}\r\n\r\n/**\r\n * withClient(async (c) => { ... })  // c = client PG\r\n * Gère connect/release et laisse ton code au propre.\r\n */\r\nexport async function withClient(fn) {\r\n  const pool = getPool();\r\n  const client = await pool.connect();\r\n  try {\r\n    return await fn(client);\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AAEA,IAAI,QAAQ,WAAW,SAAS;AAChC,IAAI,CAAC,OAAO;IACV,QAAQ,IAAI,oGAAA,CAAA,OAAI,CAAC;QACf,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC1C,KAAK;YAAE,oBAAoB;QAAM;IACnC;IACA,WAAW,SAAS,GAAG;AACzB;AAEO,SAAS;IACd,OAAO;AACT;AAMO,eAAe,WAAW,EAAE;IACjC,MAAM,OAAO;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,OAAO,MAAM,GAAG;IAClB,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/dossiers/%5Bid%5D/pieces/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getPool } from \"../../../_lib/db.mjs\";\r\n\r\nconst pool = getPool();\r\n\r\n/**\r\n * GET /api/dossiers/:id/pieces\r\n * Retourne :\r\n *  - pieces_expected : liste officielle des pièces attendues (partner/segment/générique)\r\n *  - pieces_state    : état consolidé par piece_key (dernière version + statut)\r\n *  - summary         : { total_required, validated_count, canValidate }\r\n *  - capabilities    : { canUpload, canReplace } (à ajuster selon ton auth/role)\r\n */\r\nexport async function GET(request, { params }) {\r\n  try {\r\n    // params n'est PAS asynchrone\r\n    const { id } = await params || {};\r\n    const dossierId = Number(id);\r\n\r\n    if (!dossierId || Number.isNaN(dossierId)) {\r\n      return NextResponse.json(\r\n        { error: \"ID dossier invalide\", error_code: \"INVALID_DOSSIER_ID\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const client = await pool.connect();\r\n    try {\r\n      // (optionnel) contrôle d’accès : adapte selon ton système d’auth\r\n      // const role = request.headers.get(\"x-role\"); // 'client' | 'partner_user' | 'operator' | 'admin'\r\n      // const callerId = request.headers.get(\"x-user-id\");\r\n      // -> ici tu peux vérifier que l'appelant a le droit de voir ce dossier\r\n\r\n      // On va chercher les 3 blocs via les fonctions SQL\r\n      const expectedQ = client.query(\r\n        \"SELECT * FROM core.get_expected_pieces_for_dossier($1);\",\r\n        [dossierId]\r\n      );\r\n      const stateQ = client.query(\r\n        \"SELECT * FROM core.get_pieces_state_for_dossier($1);\",\r\n        [dossierId]\r\n      );\r\n      const summaryQ = client.query(\r\n        \"SELECT * FROM core.get_pieces_summary_for_dossier($1);\",\r\n        [dossierId]\r\n      );\r\n      // (facultatif) lire des infos du dossier pour capabilities\r\n      const dossierQ = client.query(\r\n        \"SELECT blocages FROM core.dossiers WHERE id = $1 LIMIT 1;\",\r\n        [dossierId]\r\n      );\r\n\r\n      const [expectedRes, stateRes, summaryRes, dossierRes] = await Promise.all([\r\n        expectedQ,\r\n        stateQ,\r\n        summaryQ,\r\n        dossierQ,\r\n      ]);\r\n\r\n      // Normalisation\r\n      const pieces_expected = expectedRes.rows ?? [];\r\n      const pieces_state = stateRes.rows ?? [];\r\n      const summary = summaryRes.rows?.[0] ?? {\r\n        total_required: 0,\r\n        validated_count: 0,\r\n        canValidate: false,\r\n      };\r\n\r\n      const blocages = dossierRes.rows?.[0]?.blocages ?? [];\r\n\r\n      // Capabilities : tu peux raffiner selon rôle/statut/blocages\r\n      const capabilities = {\r\n        canUpload: Array.isArray(blocages) ? blocages.length === 0 : true,\r\n        canReplace: true, // ou false si tu veux verrouiller après validation\r\n      };\r\n\r\n      return NextResponse.json({\r\n        pieces_expected,\r\n        pieces_state,\r\n        summary,\r\n        capabilities,\r\n      });\r\n    } finally {\r\n      client.release();\r\n    }\r\n  } catch (err) {\r\n    console.error(\"GET /dossiers/:id/pieces error:\", err);\r\n    return NextResponse.json(\r\n      { error: \"Erreur lors de la récupération des pièces\", error_code: \"UNEXPECTED_ERROR\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;AAEA,MAAM,OAAO,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD;AAUZ,eAAe,IAAI,OAAO,EAAE,EAAE,MAAM,EAAE;IAC3C,IAAI;QACF,8BAA8B;QAC9B,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,UAAU,CAAC;QAChC,MAAM,YAAY,OAAO;QAEzB,IAAI,CAAC,aAAa,OAAO,KAAK,CAAC,YAAY;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAuB,YAAY;YAAqB,GACjE;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,MAAM,KAAK,OAAO;QACjC,IAAI;YACF,iEAAiE;YACjE,kGAAkG;YAClG,qDAAqD;YACrD,uEAAuE;YAEvE,mDAAmD;YACnD,MAAM,YAAY,OAAO,KAAK,CAC5B,2DACA;gBAAC;aAAU;YAEb,MAAM,SAAS,OAAO,KAAK,CACzB,wDACA;gBAAC;aAAU;YAEb,MAAM,WAAW,OAAO,KAAK,CAC3B,0DACA;gBAAC;aAAU;YAEb,2DAA2D;YAC3D,MAAM,WAAW,OAAO,KAAK,CAC3B,6DACA;gBAAC;aAAU;YAGb,MAAM,CAAC,aAAa,UAAU,YAAY,WAAW,GAAG,MAAM,QAAQ,GAAG,CAAC;gBACxE;gBACA;gBACA;gBACA;aACD;YAED,gBAAgB;YAChB,MAAM,kBAAkB,YAAY,IAAI,IAAI,EAAE;YAC9C,MAAM,eAAe,SAAS,IAAI,IAAI,EAAE;YACxC,MAAM,UAAU,WAAW,IAAI,EAAE,CAAC,EAAE,IAAI;gBACtC,gBAAgB;gBAChB,iBAAiB;gBACjB,aAAa;YACf;YAEA,MAAM,WAAW,WAAW,IAAI,EAAE,CAAC,EAAE,EAAE,YAAY,EAAE;YAErD,6DAA6D;YAC7D,MAAM,eAAe;gBACnB,WAAW,MAAM,OAAO,CAAC,YAAY,SAAS,MAAM,KAAK,IAAI;gBAC7D,YAAY;YACd;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB;gBACA;gBACA;gBACA;YACF;QACF,SAAU;YACR,OAAO,OAAO;QAChB;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA6C,YAAY;QAAmB,GACrF;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}