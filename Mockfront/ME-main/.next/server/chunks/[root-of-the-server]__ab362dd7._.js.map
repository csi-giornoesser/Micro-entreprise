{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/db.mjs"],"sourcesContent":["// src/app/api/_lib/db.mjs\r\nimport { Pool } from \"pg\";\r\n\r\nlet _pool = globalThis.__PG_POOL;\r\nif (!_pool) {\r\n  _pool = new Pool({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: { rejectUnauthorized: false }, // Neon\r\n  });\r\n  globalThis.__PG_POOL = _pool;\r\n}\r\n\r\nexport function getPool() {\r\n  return _pool;\r\n}\r\n\r\n/**\r\n * withClient(async (c) => { ... })  // c = client PG\r\n * Gère connect/release et laisse ton code au propre.\r\n */\r\nexport async function withClient(fn) {\r\n  const pool = getPool();\r\n  const client = await pool.connect();\r\n  try {\r\n    return await fn(client);\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AAEA,IAAI,QAAQ,WAAW,SAAS;AAChC,IAAI,CAAC,OAAO;IACV,QAAQ,IAAI,oGAAA,CAAA,OAAI,CAAC;QACf,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC1C,KAAK;YAAE,oBAAoB;QAAM;IACnC;IACA,WAAW,SAAS,GAAG;AACzB;AAEO,SAAS;IACd,OAAO;AACT;AAMO,eAAe,WAAW,EAAE;IACjC,MAAM,OAAO;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,OAAO,MAAM,GAAG;IAClB,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/kickSLA.ts"],"sourcesContent":["// app/api/_lib/kickSLA.ts\r\nimport { getPool } from \"./db.mjs\";\r\n\r\n// Throttle: 1 exécution max toutes les 2 minutes par instance\r\nlet lastRun = 0;\r\nconst MIN_MS_BETWEEN_RUNS = 2 * 60 * 1000;\r\n\r\nexport async function kickSLA(limit: number = 200) {\r\n  const now = Date.now();\r\n  if (now - lastRun < MIN_MS_BETWEEN_RUNS) return;\r\n  lastRun = now;\r\n\r\n  try {\r\n    const pool = getPool();\r\n    await pool.query(\"SELECT * FROM core.create_due_tickets($1);\", [limit]);\r\n    await pool.query(\"SELECT core.produce_notifications();\");      // enqueuer selon l'état\r\n    await pool.query(\"SELECT core.dispatch_due_notifications();\"); // envoyer celles arrivées à échéance\r\n  } catch (e: any) {\r\n    console.warn(\"[kickSLA] skipped:\", e.message);\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;AAC1B;;;;;;AAEA,8DAA8D;AAC9D,IAAI,UAAU;AACd,MAAM,sBAAsB,IAAI,KAAK;AAE9B,eAAe,QAAQ,QAAgB,GAAG;IAC/C,MAAM,MAAM,KAAK,GAAG;IACpB,IAAI,MAAM,UAAU,qBAAqB;IACzC,UAAU;IAEV,IAAI;QACF,MAAM,OAAO,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD;QACnB,MAAM,KAAK,KAAK,CAAC,8CAA8C;YAAC;SAAM;QACtE,MAAM,KAAK,KAAK,CAAC,yCAA8C,wBAAwB;QACvF,MAAM,KAAK,KAAK,CAAC,8CAA8C,qCAAqC;IACtG,EAAE,OAAO,GAAQ;QACf,QAAQ,IAAI,CAAC,sBAAsB,EAAE,OAAO;IAC9C;AACF","debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/entreprises/%5Bid%5D/route.js"],"sourcesContent":["export const runtime = \"nodejs\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { getPool } from \"../../_lib/db.mjs\";\r\nimport { kickSLA } from \"../../_lib/kickSLA.ts\";\r\n\r\nconst pool = getPool();\r\n\r\nexport async function GET(_req, { params }) {\r\n  await kickSLA();\r\n\r\n  const id = Number(params.id);\r\n  if (Number.isNaN(id)) {\r\n    return NextResponse.json({ error: \"bad id\" }, { status: 400 });\r\n  }\r\n\r\n  const client = await pool.connect();\r\n  try {\r\n    // Entreprise\r\n    const { rows: eRows } = await client.query(\r\n      `SELECT *\r\n         FROM core.entreprises\r\n        WHERE id = $1`,\r\n      [id]\r\n    );\r\n    if (eRows.length === 0) {\r\n      return NextResponse.json({ error: \"not found\" }, { status: 404 });\r\n    }\r\n    const e = eRows[0];\r\n\r\n    // Titulaire (mini)\r\n    const { rows: titulaireRows } = await client.query(\r\n      `SELECT id, prenom, nom\r\n         FROM core.clients\r\n        WHERE id = $1`,\r\n      [e.titulaire_client_id]\r\n    );\r\n    const titulaire = titulaireRows[0] ?? null;\r\n\r\n    // Docs générés\r\n    const { rows: docs } = await client.query(\r\n      `SELECT type, source, fichier, date\r\n         FROM core.documents_generes\r\n        WHERE entreprise_id = $1\r\n        ORDER BY date NULLS LAST, id`,\r\n      [id]\r\n    );\r\n\r\n    // Dossiers liés\r\n    const { rows: dossiers } = await client.query(\r\n      `SELECT id, client_id, partenaire_id, statut,\r\n              date_creation, derniere_modification, commission_partenaire_eur\r\n         FROM core.dossiers\r\n        WHERE entreprise_id = $1\r\n        ORDER BY date_creation DESC`,\r\n      [id]\r\n    );\r\n\r\n    // Jobs scraping\r\n    const { rows: jobs } = await client.query(\r\n      `SELECT id, portail, etat, last_event, updated_at\r\n         FROM core.scraping_jobs\r\n        WHERE entreprise_id = $1\r\n        ORDER BY updated_at DESC NULLS LAST`,\r\n      [id]\r\n    );\r\n\r\n    // Réponse structurée \"à la mock\" pour limiter tes changements UI\r\n    return NextResponse.json({\r\n      entreprise: {\r\n        id: e.id,\r\n        denomination: e.denomination,\r\n        forme: e.forme,\r\n        statut_dossier: e.statut_dossier,\r\n        titulaire_client: titulaire, // {id, prenom, nom}\r\n        activite: e.activite,\r\n        lieu_exercice: e.lieu_exercice,\r\n        dates: e.dates,\r\n        options_sociales: e.options_sociales,\r\n        options_fiscales: e.options_fiscales,\r\n        service_paiement: e.service_paiement,\r\n        checklist_conformite: e.checklist_conformite,\r\n        donnees_gouvernement: {\r\n          guichet_unique_INPI: e.gov_inpi,\r\n          INSEE_SIRENE: e.gov_insee,\r\n          URSSAF: e.gov_urssaf,\r\n          RNE: e.gov_rne,\r\n        },\r\n      },\r\n      documents_generes: docs,\r\n      dossiers,\r\n      scraping_jobs: jobs,\r\n    });\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;;;AAHO,MAAM,UAAU;;;;AAKvB,MAAM,OAAO,CAAA,GAAA,2HAAA,CAAA,UAAO,AAAD;AAEZ,eAAe,IAAI,IAAI,EAAE,EAAE,MAAM,EAAE;IACxC,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAEZ,MAAM,KAAK,OAAO,OAAO,EAAE;IAC3B,IAAI,OAAO,KAAK,CAAC,KAAK;QACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAS,GAAG;YAAE,QAAQ;QAAI;IAC9D;IAEA,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,aAAa;QACb,MAAM,EAAE,MAAM,KAAK,EAAE,GAAG,MAAM,OAAO,KAAK,CACxC,CAAC;;qBAEc,CAAC,EAChB;YAAC;SAAG;QAEN,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAY,GAAG;gBAAE,QAAQ;YAAI;QACjE;QACA,MAAM,IAAI,KAAK,CAAC,EAAE;QAElB,mBAAmB;QACnB,MAAM,EAAE,MAAM,aAAa,EAAE,GAAG,MAAM,OAAO,KAAK,CAChD,CAAC;;qBAEc,CAAC,EAChB;YAAC,EAAE,mBAAmB;SAAC;QAEzB,MAAM,YAAY,aAAa,CAAC,EAAE,IAAI;QAEtC,eAAe;QACf,MAAM,EAAE,MAAM,IAAI,EAAE,GAAG,MAAM,OAAO,KAAK,CACvC,CAAC;;;oCAG6B,CAAC,EAC/B;YAAC;SAAG;QAGN,gBAAgB;QAChB,MAAM,EAAE,MAAM,QAAQ,EAAE,GAAG,MAAM,OAAO,KAAK,CAC3C,CAAC;;;;mCAI4B,CAAC,EAC9B;YAAC;SAAG;QAGN,gBAAgB;QAChB,MAAM,EAAE,MAAM,IAAI,EAAE,GAAG,MAAM,OAAO,KAAK,CACvC,CAAC;;;2CAGoC,CAAC,EACtC;YAAC;SAAG;QAGN,iEAAiE;QACjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,YAAY;gBACV,IAAI,EAAE,EAAE;gBACR,cAAc,EAAE,YAAY;gBAC5B,OAAO,EAAE,KAAK;gBACd,gBAAgB,EAAE,cAAc;gBAChC,kBAAkB;gBAClB,UAAU,EAAE,QAAQ;gBACpB,eAAe,EAAE,aAAa;gBAC9B,OAAO,EAAE,KAAK;gBACd,kBAAkB,EAAE,gBAAgB;gBACpC,kBAAkB,EAAE,gBAAgB;gBACpC,kBAAkB,EAAE,gBAAgB;gBACpC,sBAAsB,EAAE,oBAAoB;gBAC5C,sBAAsB;oBACpB,qBAAqB,EAAE,QAAQ;oBAC/B,cAAc,EAAE,SAAS;oBACzB,QAAQ,EAAE,UAAU;oBACpB,KAAK,EAAE,OAAO;gBAChB;YACF;YACA,mBAAmB;YACnB;YACA,eAAe;QACjB;IACF,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}}]
}