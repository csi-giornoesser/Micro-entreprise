{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/db.mjs"],"sourcesContent":["// src/app/api/_lib/db.mjs\r\nimport { Pool } from \"pg\";\r\n\r\nlet _pool = globalThis.__PG_POOL;\r\nif (!_pool) {\r\n  _pool = new Pool({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: { rejectUnauthorized: false }, // Neon\r\n  });\r\n  globalThis.__PG_POOL = _pool;\r\n}\r\n\r\nexport function getPool() {\r\n  return _pool;\r\n}\r\n\r\n/**\r\n * withClient(async (c) => { ... })  // c = client PG\r\n * Gère connect/release et laisse ton code au propre.\r\n */\r\nexport async function withClient(fn) {\r\n  const pool = getPool();\r\n  const client = await pool.connect();\r\n  try {\r\n    return await fn(client);\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AAEA,IAAI,QAAQ,WAAW,SAAS;AAChC,IAAI,CAAC,OAAO;IACV,QAAQ,IAAI,oGAAA,CAAA,OAAI,CAAC;QACf,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC1C,KAAK;YAAE,oBAAoB;QAAM;IACnC;IACA,WAAW,SAAS,GAAG;AACzB;AAEO,SAAS;IACd,OAAO;AACT;AAMO,eAAe,WAAW,EAAE;IACjC,MAAM,OAAO;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,OAAO,MAAM,GAAG;IAClB,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/tickets/%5Bid%5D/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getPool } from \"../../_lib/db.mjs\";\r\n\r\nconst pool = getPool();\r\n\r\nexport async function GET(req, { params }) {\r\n  try {\r\n    const { id } = params;\r\n    \r\n    if (!id || isNaN(parseInt(id))) {\r\n      return NextResponse.json({ error: \"ID ticket invalide\" }, { status: 400 });\r\n    }\r\n\r\n    const c = await pool.connect();\r\n    \r\n    try {\r\n      // 1. Récupérer le ticket avec toutes les infos liées\r\n      const { rows: tickets } = await c.query(`\r\n        SELECT \r\n          t.id,\r\n          t.dossier_id,\r\n          t.subject,\r\n          t.statut,\r\n          t.priorite,\r\n          t.assigne_operateur_id,\r\n          t.ouverture,\r\n          t.source,\r\n          t.created_at,\r\n          \r\n          -- Info dossier complet\r\n          d.statut as dossier_statut,\r\n          d.client_id,\r\n          d.entreprise_id,\r\n          d.partenaire_id,\r\n          d.date_creation as dossier_date_creation,\r\n          d.commission_partenaire_eur,\r\n          \r\n          -- Info client\r\n          c.prenom,\r\n          c.nom,\r\n          c.email,\r\n          c.telephone,\r\n          \r\n          -- Entreprise\r\n          e.denomination,\r\n          e.forme,\r\n          \r\n          -- Partenaire\r\n          p.nom as partenaire_nom,\r\n          \r\n          -- Opérateur assigné\r\n          o.nom as operateur_nom,\r\n          o.email as operateur_email\r\n          \r\n        FROM core.tickets t\r\n        LEFT JOIN core.dossiers d ON t.dossier_id = d.id\r\n        LEFT JOIN core.clients c ON d.client_id = c.id\r\n        LEFT JOIN core.entreprises e ON d.entreprise_id = e.id\r\n        LEFT JOIN core.partenaires p ON d.partenaire_id = p.id\r\n        LEFT JOIN core.operateurs o ON t.assigne_operateur_id = o.id\r\n        WHERE t.id = $1\r\n      `, [parseInt(id)]);\r\n\r\n      if (!tickets.length) {\r\n        return NextResponse.json({ error: \"Ticket introuvable\" }, { status: 404 });\r\n      }\r\n\r\n      const ticket = tickets[0];\r\n\r\n      // 2. Récupérer tous les events du ticket\r\n      const { rows: events } = await c.query(`\r\n        SELECT \r\n          id,\r\n          ticket_id,\r\n          at,\r\n          message,\r\n          attachments\r\n        FROM core.ticket_events\r\n        WHERE ticket_id = $1\r\n        ORDER BY at ASC\r\n      `, [parseInt(id)]);\r\n\r\n      // 3. Récupérer la liste des opérateurs pour assignation\r\n      const { rows: operateurs } = await c.query(`\r\n        SELECT id, nom, email, role\r\n        FROM core.operateurs\r\n        ORDER BY nom\r\n      `);\r\n\r\n      return NextResponse.json({\r\n        ticket,\r\n        events,\r\n        operateurs,\r\n        references: {\r\n          statuts: [\"Nouveau\", \"En cours\", \"Résolu\", \"Fermé\"],\r\n          priorites: [\"Basse\", \"Moyenne\", \"Haute\"]\r\n        }\r\n      });\r\n\r\n    } finally {\r\n      c.release();\r\n    }\r\n\r\n  } catch (e) {\r\n    console.error(\"Erreur GET ticket detail:\", e);\r\n    return NextResponse.json({\r\n      error: \"Erreur lors de la récupération du ticket\"\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PATCH(req, { params }) {\r\n  try {\r\n    const { id } = params;\r\n    const body = await req.json().catch(() => ({}));\r\n    \r\n    if (!id || isNaN(parseInt(id))) {\r\n      return NextResponse.json({ error: \"ID ticket invalide\" }, { status: 400 });\r\n    }\r\n\r\n    const {\r\n      statut,\r\n      priorite,\r\n      assigne_operateur_id,\r\n      subject,\r\n      auto_event_message = true // Créer un event automatique pour tracer les changements\r\n    } = body;\r\n\r\n    // Validation des valeurs\r\n    const validStatuts = [\"Nouveau\", \"En cours\", \"Résolu\", \"Fermé\"];\r\n    const validPriorites = [\"Basse\", \"Moyenne\", \"Haute\"];\r\n\r\n    if (statut && !validStatuts.includes(statut)) {\r\n      return NextResponse.json({ error: \"Statut invalide\" }, { status: 400 });\r\n    }\r\n\r\n    if (priorite && !validPriorites.includes(priorite)) {\r\n      return NextResponse.json({ error: \"Priorité invalide\" }, { status: 400 });\r\n    }\r\n\r\n    const c = await pool.connect();\r\n    \r\n    try {\r\n      await c.query(\"BEGIN\");\r\n\r\n      // 1. Récupérer l'état actuel pour comparaison\r\n      const { rows: currentTicket } = await c.query(`\r\n        SELECT statut, priorite, assigne_operateur_id, subject\r\n        FROM core.tickets \r\n        WHERE id = $1\r\n      `, [parseInt(id)]);\r\n\r\n      if (!currentTicket.length) {\r\n        await c.query(\"ROLLBACK\");\r\n        return NextResponse.json({ error: \"Ticket introuvable\" }, { status: 404 });\r\n      }\r\n\r\n      const current = currentTicket[0];\r\n\r\n      // 2. Construire la requête de mise à jour\r\n      let updateFields = [];\r\n      let updateParams = [];\r\n      let paramCount = 0;\r\n      let changes = [];\r\n\r\n      if (statut && statut !== current.statut) {\r\n        paramCount++;\r\n        updateFields.push(`statut = $${paramCount}`);\r\n        updateParams.push(statut);\r\n        changes.push(`Statut: ${current.statut} → ${statut}`);\r\n      }\r\n\r\n      if (priorite && priorite !== current.priorite) {\r\n        paramCount++;\r\n        updateFields.push(`priorite = $${paramCount}`);\r\n        updateParams.push(priorite);\r\n        changes.push(`Priorité: ${current.priorite} → ${priorite}`);\r\n      }\r\n\r\n      if (assigne_operateur_id !== undefined && assigne_operateur_id !== current.assigne_operateur_id) {\r\n        paramCount++;\r\n        updateFields.push(`assigne_operateur_id = $${paramCount}`);\r\n        updateParams.push(assigne_operateur_id);\r\n        \r\n        if (assigne_operateur_id === null) {\r\n          changes.push(\"Ticket désassigné\");\r\n        } else {\r\n          changes.push(`Assigné à l'opérateur #${assigne_operateur_id}`);\r\n        }\r\n      }\r\n\r\n      if (subject && subject.trim() !== current.subject) {\r\n        paramCount++;\r\n        updateFields.push(`subject = $${paramCount}`);\r\n        updateParams.push(subject.trim());\r\n        changes.push(`Sujet modifié: \"${subject.trim()}\"`);\r\n      }\r\n\r\n      // 3. Effectuer la mise à jour si nécessaire\r\n      if (updateFields.length > 0) {\r\n        updateParams.push(parseInt(id));\r\n        const updateQuery = `\r\n          UPDATE core.tickets \r\n          SET ${updateFields.join(\", \")}\r\n          WHERE id = $${++paramCount}\r\n          RETURNING id, subject, statut, priorite, assigne_operateur_id\r\n        `;\r\n\r\n        const { rows: updatedTicket } = await c.query(updateQuery, updateParams);\r\n\r\n        // 4. Ajouter un event automatique si demandé\r\n        if (auto_event_message && changes.length > 0) {\r\n          await c.query(`\r\n            INSERT INTO core.ticket_events (ticket_id, message)\r\n            VALUES ($1, $2)\r\n          `, [parseInt(id), `Modifications: ${changes.join(\", \")}`]);\r\n        }\r\n\r\n        await c.query(\"COMMIT\");\r\n\r\n        return NextResponse.json({\r\n          ticket: updatedTicket[0],\r\n          changes,\r\n          message: \"Ticket mis à jour avec succès\"\r\n        });\r\n\r\n      } else {\r\n        await c.query(\"ROLLBACK\");\r\n        return NextResponse.json({\r\n          message: \"Aucune modification détectée\"\r\n        });\r\n      }\r\n\r\n    } finally {\r\n      c.release();\r\n    }\r\n\r\n  } catch (e) {\r\n    console.error(\"Erreur PATCH ticket:\", e);\r\n    return NextResponse.json({\r\n      error: \"Erreur lors de la mise à jour du ticket\"\r\n    }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}