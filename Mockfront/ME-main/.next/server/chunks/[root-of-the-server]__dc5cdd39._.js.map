{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/db.mjs"],"sourcesContent":["// src/app/api/_lib/db.mjs\r\nimport { Pool } from \"pg\";\r\n\r\nlet _pool = globalThis.__PG_POOL;\r\nif (!_pool) {\r\n  _pool = new Pool({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: { rejectUnauthorized: false }, // Neon\r\n  });\r\n  globalThis.__PG_POOL = _pool;\r\n}\r\n\r\nexport function getPool() {\r\n  return _pool;\r\n}\r\n\r\n/**\r\n * withClient(async (c) => { ... })  // c = client PG\r\n * Gère connect/release et laisse ton code au propre.\r\n */\r\nexport async function withClient(fn) {\r\n  const pool = getPool();\r\n  const client = await pool.connect();\r\n  try {\r\n    return await fn(client);\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AAEA,IAAI,QAAQ,WAAW,SAAS;AAChC,IAAI,CAAC,OAAO;IACV,QAAQ,IAAI,oGAAA,CAAA,OAAI,CAAC;QACf,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC1C,KAAK;YAAE,oBAAoB;QAAM;IACnC;IACA,WAAW,SAAS,GAAG;AACzB;AAEO,SAAS;IACd,OAAO;AACT;AAMO,eAAe,WAAW,EAAE;IACjC,MAAM,OAAO;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,OAAO,MAAM,GAAG;IAClB,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/dossiers/%5Bid%5D/messages/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getPool } from \"../../../_lib/db.mjs\";\r\n\r\nconst pool = getPool();\r\n\r\n// GET - Récupérer tous les messages d'un dossier\r\nexport async function GET(req, { params }) {\r\n  try {\r\n    const { id } = params;\r\n    \r\n    if (!id || isNaN(parseInt(id))) {\r\n      return NextResponse.json({ error: \"ID dossier invalide\" }, { status: 400 });\r\n    }\r\n\r\n    const c = await pool.connect();\r\n    \r\n    try {\r\n      // Vérifier que le dossier existe et récupérer infos contexte\r\n      const { rows: dossiers } = await c.query(`\r\n        SELECT \r\n          d.id,\r\n          d.client_id,\r\n          d.statut,\r\n          c.prenom,\r\n          c.nom,\r\n          c.email,\r\n          e.denomination\r\n        FROM core.dossiers d\r\n        LEFT JOIN core.clients c ON d.client_id = c.id\r\n        LEFT JOIN core.entreprises e ON d.entreprise_id = e.id\r\n        WHERE d.id = $1\r\n      `, [parseInt(id)]);\r\n\r\n      if (!dossiers.length) {\r\n        return NextResponse.json({ error: \"Dossier introuvable\" }, { status: 404 });\r\n      }\r\n\r\n      const dossier = dossiers[0];\r\n\r\n      // Récupérer tous les messages du dossier\r\n      const { rows: messages } = await c.query(`\r\n        SELECT \r\n          id,\r\n          dossier_id,\r\n          sender_type,\r\n          body,\r\n          at\r\n        FROM core.messages\r\n        WHERE dossier_id = $1\r\n        ORDER BY at ASC\r\n      `, [parseInt(id)]);\r\n\r\n      return NextResponse.json({\r\n        dossier,\r\n        messages,\r\n        references: {\r\n          sender_types: [\"Client\", \"Opérateur\", \"Système\"]\r\n        }\r\n      });\r\n\r\n    } finally {\r\n      c.release();\r\n    }\r\n\r\n  } catch (e) {\r\n    console.error(\"Erreur GET messages dossier:\", e);\r\n    return NextResponse.json({\r\n      error: \"Erreur lors de la récupération des messages\"\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST - Ajouter un nouveau message\r\nexport async function POST(req, { params }) {\r\n  try {\r\n    const { id } = params;\r\n    const body = await req.json().catch(() => ({}));\r\n    \r\n    if (!id || isNaN(parseInt(id))) {\r\n      return NextResponse.json({ error: \"ID dossier invalide\" }, { status: 400 });\r\n    }\r\n\r\n    const {\r\n      sender_type = \"Opérateur\", // \"Client\" | \"Opérateur\" | \"Système\"\r\n      body: messageBody,\r\n      send_email = true, // Envoyer email automatique au client ?\r\n      email_template = \"message_operateur\" // Template à utiliser\r\n    } = body;\r\n\r\n    if (!messageBody || !messageBody.trim()) {\r\n      return NextResponse.json({ error: \"Message requis\" }, { status: 400 });\r\n    }\r\n\r\n    const validSenderTypes = [\"Client\", \"Opérateur\", \"Système\"];\r\n    if (!validSenderTypes.includes(sender_type)) {\r\n      return NextResponse.json({ error: \"sender_type invalide\" }, { status: 400 });\r\n    }\r\n\r\n    const c = await pool.connect();\r\n    \r\n    try {\r\n      await c.query(\"BEGIN\");\r\n\r\n      // 1. Vérifier que le dossier existe et récupérer infos client\r\n      const { rows: dossiers } = await c.query(`\r\n        SELECT \r\n          d.id,\r\n          d.client_id,\r\n          c.email as client_email,\r\n          c.prenom,\r\n          c.nom\r\n        FROM core.dossiers d\r\n        LEFT JOIN core.clients c ON d.client_id = c.id\r\n        WHERE d.id = $1\r\n      `, [parseInt(id)]);\r\n\r\n      if (!dossiers.length) {\r\n        await c.query(\"ROLLBACK\");\r\n        return NextResponse.json({ error: \"Dossier introuvable\" }, { status: 404 });\r\n      }\r\n\r\n      const dossier = dossiers[0];\r\n\r\n      // 2. Insérer le message\r\n      const { rows: messages } = await c.query(`\r\n        INSERT INTO core.messages (dossier_id, sender_type, body)\r\n        VALUES ($1, $2, $3)\r\n        RETURNING id, dossier_id, sender_type, body, at\r\n      `, [parseInt(id), sender_type, messageBody.trim()]);\r\n\r\n      const message = messages[0];\r\n\r\n      // 3. Envoyer email automatique si demandé et si c'est un message opérateur\r\n      if (send_email && sender_type === \"Opérateur\" && dossier.client_email) {\r\n        await c.query(`\r\n          INSERT INTO core.emails_automatiques (type, envoye_le, client_id, dossier_id, canal)\r\n          VALUES ($1, NOW(), $2, $3, 'email')\r\n        `, [\"message_operateur\", dossier.client_id, parseInt(id)]);\r\n\r\n        // Optionnel: ajouter à la queue de notifications pour traitement différé\r\n        await c.query(`\r\n          INSERT INTO core.notifications_queue (id, type, client_id, dossier_id, canal, scheduled_for, message)\r\n          VALUES ($1, $2, $3, $4, 'email', NOW() + INTERVAL '1 minute', $5)\r\n        `, [\r\n          `msg_${message.id}_${Date.now()}`,\r\n          \"nouveau_message_operateur\", \r\n          dossier.client_id, \r\n          parseInt(id),\r\n          messageBody.trim()  // ← Ajout du contenu du message\r\n        ]);\r\n      }\r\n\r\n      await c.query(\"COMMIT\");\r\n\r\n      return NextResponse.json({\r\n        message,\r\n        email_sent: send_email && sender_type === \"Opérateur\",\r\n        client_email: dossier.client_email,\r\n        success_message: \"Message ajouté avec succès\"\r\n      }, { status: 201 });\r\n\r\n    } finally {\r\n      c.release();\r\n    }\r\n\r\n  } catch (e) {\r\n    console.error(\"Erreur POST message dossier:\", e);\r\n    return NextResponse.json({\r\n      error: \"Erreur lors de l'ajout du message\"\r\n    }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}