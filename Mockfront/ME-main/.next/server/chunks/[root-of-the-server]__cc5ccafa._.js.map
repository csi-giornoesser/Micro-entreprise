{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/_lib/db.mjs"],"sourcesContent":["// src/app/api/_lib/db.mjs\r\nimport { Pool } from \"pg\";\r\n\r\nlet _pool = globalThis.__PG_POOL;\r\nif (!_pool) {\r\n  _pool = new Pool({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: { rejectUnauthorized: false }, // Neon\r\n  });\r\n  globalThis.__PG_POOL = _pool;\r\n}\r\n\r\nexport function getPool() {\r\n  return _pool;\r\n}\r\n\r\n/**\r\n * withClient(async (c) => { ... })  // c = client PG\r\n * Gère connect/release et laisse ton code au propre.\r\n */\r\nexport async function withClient(fn) {\r\n  const pool = getPool();\r\n  const client = await pool.connect();\r\n  try {\r\n    return await fn(client);\r\n  } finally {\r\n    client.release();\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAC1B;;;;;;AAEA,IAAI,QAAQ,WAAW,SAAS;AAChC,IAAI,CAAC,OAAO;IACV,QAAQ,IAAI,oGAAA,CAAA,OAAI,CAAC;QACf,kBAAkB,QAAQ,GAAG,CAAC,YAAY;QAC1C,KAAK;YAAE,oBAAoB;QAAM;IACnC;IACA,WAAW,SAAS,GAAG;AACzB;AAEO,SAAS;IACd,OAAO;AACT;AAMO,eAAe,WAAW,EAAE;IACjC,MAAM,OAAO;IACb,MAAM,SAAS,MAAM,KAAK,OAAO;IACjC,IAAI;QACF,OAAO,MAAM,GAAG;IAClB,SAAU;QACR,OAAO,OAAO;IAChB;AACF","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/ME/app/api/exports/dossiers/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getPool } from \"../../_lib/db.mjs\";\r\n\r\nconst pool = getPool();\r\n\r\nexport async function GET(req) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    \r\n    // Récupérer les mêmes filtres que le dashboard\r\n    const status = searchParams.get(\"status\");\r\n    const partnerId = searchParams.get(\"partnerId\");\r\n    const operatorId = searchParams.get(\"operatorId\");\r\n    const dateFrom = searchParams.get(\"from\");\r\n    const dateTo = searchParams.get(\"to\");\r\n    const format = searchParams.get(\"format\") || \"csv\";\r\n\r\n    // Construction de la requête avec filtres\r\n    let whereConditions = [];\r\n    let params = [];\r\n    let paramCount = 0;\r\n\r\n    if (status && status !== \"all\") {\r\n      paramCount++;\r\n      whereConditions.push(`d.statut = $${paramCount}`);\r\n      params.push(status);\r\n    }\r\n\r\n    if (partnerId && partnerId !== \"all\") {\r\n      paramCount++;\r\n      whereConditions.push(`d.partenaire_id = $${paramCount}`);\r\n      params.push(parseInt(partnerId));\r\n    }\r\n\r\n    if (operatorId && operatorId !== \"all\") {\r\n      paramCount++;\r\n      whereConditions.push(`d.operateur_id = $${paramCount}`);\r\n      params.push(parseInt(operatorId));\r\n    }\r\n\r\n    if (dateFrom) {\r\n      paramCount++;\r\n      whereConditions.push(`d.date_creation >= $${paramCount}`);\r\n      params.push(dateFrom);\r\n    }\r\n\r\n    if (dateTo) {\r\n      paramCount++;\r\n      whereConditions.push(`d.date_creation <= $${paramCount}::date + INTERVAL '1 day'`);\r\n      params.push(dateTo);\r\n    }\r\n\r\n    const whereClause = whereConditions.length > 0 \r\n      ? `WHERE ${whereConditions.join(\" AND \")}`\r\n      : \"\";\r\n\r\n    // Requête optimisée pour l'export\r\n    const query = `\r\n      SELECT \r\n        d.id as \"ID\",\r\n        TO_CHAR(d.date_creation, 'DD/MM/YYYY') as \"Date création\",\r\n        d.statut as \"Statut\",\r\n        CONCAT(c.prenom, ' ', c.nom) as \"Client\",\r\n        c.email as \"Email client\",\r\n        c.telephone as \"Téléphone\",\r\n        e.denomination as \"Entreprise\",\r\n        e.forme as \"Forme juridique\",\r\n        p.nom as \"Partenaire\",\r\n        o.nom as \"Opérateur\",\r\n        COALESCE(d.commission_partenaire_eur, 0) as \"Commission (€)\",\r\n        CASE \r\n          WHEN array_length(d.blocages, 1) > 0 \r\n          THEN array_to_string(d.blocages, '; ') \r\n          ELSE '' \r\n        END as \"Blocages\",\r\n        TO_CHAR(COALESCE(d.derniere_modification, d.date_creation), 'DD/MM/YYYY HH24:MI') as \"Dernière modification\",\r\n        CASE \r\n          WHEN d.exportable_csv THEN 'Oui' \r\n          ELSE 'Non' \r\n        END as \"Exportable\"\r\n        \r\n      FROM core.dossiers d\r\n      LEFT JOIN core.clients c ON d.client_id = c.id\r\n      LEFT JOIN core.entreprises e ON d.entreprise_id = e.id\r\n      LEFT JOIN core.partenaires p ON d.partenaire_id = p.id\r\n      LEFT JOIN core.operateurs o ON d.operateur_id = o.id\r\n      \r\n      ${whereClause}\r\n      ORDER BY d.date_creation DESC\r\n    `;\r\n\r\n    const { rows: dossiers } = await pool.query(query, params);\r\n\r\n    // Générer le CSV\r\n    if (format === \"csv\") {\r\n      const csvData = generateCSV(dossiers);\r\n      const fileName = `dossiers_${new Date().toISOString().slice(0,10)}.csv`;\r\n      \r\n      return new NextResponse(csvData, {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'text/csv; charset=utf-8',\r\n          'Content-Disposition': `attachment; filename=\"${fileName}\"`,\r\n          'Cache-Control': 'no-cache'\r\n        }\r\n      });\r\n    }\r\n\r\n    // Format JSON pour preview ou debug\r\n    return NextResponse.json({\r\n      dossiers,\r\n      total: dossiers.length,\r\n      filters: {\r\n        status,\r\n        partnerId,\r\n        operatorId,\r\n        dateFrom,\r\n        dateTo\r\n      },\r\n      generated_at: new Date().toISOString()\r\n    });\r\n\r\n  } catch (e) {\r\n    console.error(\"Erreur export dossiers:\", e);\r\n    return NextResponse.json({\r\n      error: \"Erreur lors de l'export des dossiers\"\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Fonction utilitaire pour générer le CSV\r\nfunction generateCSV(data) {\r\n  if (!data || data.length === 0) {\r\n    return \"Aucune donnée à exporter\";\r\n  }\r\n\r\n  // Headers (clés du premier objet)\r\n  const headers = Object.keys(data[0]);\r\n  const csvHeaders = headers.join(',');\r\n\r\n  // Données\r\n  const csvRows = data.map(row => {\r\n    return headers.map(header => {\r\n      const value = row[header];\r\n      // Échapper les guillemets et entourer de guillemets si nécessaire\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      const stringValue = String(value);\r\n      // Si la valeur contient une virgule, des guillemets ou un retour ligne, l'entourer de guillemets\r\n      if (stringValue.includes(',') || stringValue.includes('\"') || stringValue.includes('\\n')) {\r\n        return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\r\n      }\r\n      return stringValue;\r\n    }).join(',');\r\n  });\r\n\r\n  // Ajouter BOM UTF-8 pour Excel\r\n  const BOM = '\\uFEFF';\r\n  return BOM + csvHeaders + '\\n' + csvRows.join('\\n');\r\n}\r\n\r\n// POST pour export avec filtres complexes (si nécessaire)\r\nexport async function POST(req) {\r\n  try {\r\n    const body = await req.json();\r\n    const { \r\n      filters = {},\r\n      columns = null, // Colonnes personnalisées\r\n      format = \"csv\"\r\n    } = body;\r\n\r\n    // Logique similaire mais avec plus de flexibilité\r\n    // Permettre de choisir les colonnes à exporter\r\n    \r\n    return NextResponse.json({\r\n      message: \"Export personnalisé - à implémenter si besoin\",\r\n      filters,\r\n      columns,\r\n      format\r\n    });\r\n\r\n  } catch (e) {\r\n    console.error(\"Erreur POST export dossiers:\", e);\r\n    return NextResponse.json({\r\n      error: \"Erreur lors de l'export personnalisé\"\r\n    }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}